name: Release

on:
    push:
        tags:
            - "v*"

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5.0.0

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Cache cargo registry
              uses: actions/cache@v4.3.0
              with:
                  path: ~/.cargo/registry
                  key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

            - name: Cache cargo index
              uses: actions/cache@v4.3.0
              with:
                  path: ~/.cargo/git
                  key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

            - name: Cache cargo build
              uses: actions/cache@v4.3.0
              with:
                  path: target
                  key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

            - name: Run tests
              run: cargo test

    build:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5.0.0

            - name: Setup Node.js
              uses: actions/setup-node@v5.0.0
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Install frontend dependencies
              run: npm ci
              working-directory: frontend

            - name: Build frontend
              run: npm run build
              working-directory: frontend

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Add Rust targets
              run: |
                  rustup target add x86_64-unknown-linux-gnu
                  rustup target add aarch64-unknown-linux-gnu
                  rustup target add armv7-unknown-linux-gnueabihf

            - name: Install cross-compilation tools
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

            - name: Cache cargo
              uses: actions/cache@v4.3.0
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Build binaries
              run: |
                  # AMD64
                  cargo build --release --target x86_64-unknown-linux-gnu
                  mkdir -p dist/amd64
                  cp target/x86_64-unknown-linux-gnu/release/power_control_center dist/amd64/
                  tar -czf power_control_center-${{ github.ref_name }}-linux-amd64.tar.gz -C dist/amd64 power_control_center

                  # ARM64
                  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \
                  cargo build --release --target aarch64-unknown-linux-gnu
                  mkdir -p dist/arm64
                  cp target/aarch64-unknown-linux-gnu/release/power_control_center dist/arm64/
                  tar -czf power_control_center-${{ github.ref_name }}-linux-arm64.tar.gz -C dist/arm64 power_control_center

                  # ARMv7
                  CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc \
                  cargo build --release --target armv7-unknown-linux-gnueabihf
                  mkdir -p dist/armv7
                  cp target/armv7-unknown-linux-gnueabihf/release/power_control_center dist/armv7/
                  tar -czf power_control_center-${{ github.ref_name }}-linux-armv7.tar.gz -C dist/armv7 power_control_center

            - name: Upload artifacts
              uses: actions/upload-artifact@v4.6.2
              with:
                  name: power_control_center-binaries
                  path: power_control_center-${{ github.ref_name }}-linux-*.tar.gz

    release:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5.0.0

            - name: Download artifacts
              uses: actions/download-artifact@v5.0.0
              with:
                  name: power_control_center-binaries

            - name: Extract version from tag
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Create Release
              uses: softprops/action-gh-release@v2.3.3
              with:
                  tag_name: ${{ steps.version.outputs.VERSION }}
                  name: Release ${{ steps.version.outputs.VERSION }}
                  body: |
                      Release ${{ steps.version.outputs.VERSION }}

                      ## Downloads
                      - **AMD64 (x86_64)**: `power_control_center-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz`
                      - **ARM64**: `power_control_center-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz`  
                      - **ARMv7**: `power_control_center-${{ steps.version.outputs.VERSION }}-linux-armv7.tar.gz`

                      Extract with: `tar -xzf power_control_center-${{ steps.version.outputs.VERSION }}-linux-<arch>.tar.gz`
                  files: |
                      power_control_center-${{ steps.version.outputs.VERSION }}-linux-*.tar.gz
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
